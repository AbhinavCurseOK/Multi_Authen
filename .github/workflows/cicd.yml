name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Install Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs
          git lfs install

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Pull LFS objects
        run: git lfs pull

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Install Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs
          git lfs install

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Pull LFS objects
        run: git lfs pull

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          
  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Install Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs
          git lfs install

      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Pull LFS objects
        run: git lfs pull

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      
      - name: Pull latest images
        run: |
         docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         
      - name: Stop and remove container if running
        run: |
         docker ps -q --filter "name=easylogin" | grep -q . && docker stop easylogin && docker rm -fv easylogin || true
       
      - name: Run Docker Image to serve users
        run: |
          if ! docker run -d -p 8080:8080 --name=easylogin \
          -e PYTHONUNBUFFERED=1 \
          -e TENSORFLOW_CPP_MIN_LOG_LEVEL=2 \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_REGION=${{ secrets.AWS_REGION }} \
          -e AWS_ECR_LOGIN_URI=${{ secrets.AWS_ECR_LOGIN_URI }} \
          -e ECR_REPOSITORY_NAME=${{ secrets.ECR_REPOSITORY_NAME }} \
          -e DATABASE_URL=${DATABASE_URL} \
          -e STORAGE_BUCKET=${STORAGE_BUCKET} \
          -e TYPE=${TYPE} \
          -e PROJECT_ID=${PROJECT_ID} \
          -e PRIVATE_KEY_ID=${PRIVATE_KEY_ID} \
          -e PRIVATE_KEY="${PRIVATE_KEY}" \
          -e CLIENT_EMAIL=${CLIENT_EMAIL} \
          -e CLIENT_ID=${CLIENT_ID} \
          -e AUTH_URI=${AUTH_URI} \
          -e TOKEN_URI=${TOKEN_URI} \
          -e AUTH_PROVIDER_X509_CERT_URL=${AUTH_PROVIDER_X509_CERT_URL} \
          -e CLIENT_X509_CERT_URL=${CLIENT_X509_CERT_URL} \
          -e UNIVERSE_DOMAIN=${UNIVERSE_DOMAIN} \
          -e SECRET_KEY=${SECRET_KEY} \
          -e FIREBASE_API_KEY=${FIREBASE_API_KEY} \
          -e FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN} \
          -e FIREBASE_DATABASE_URL=${FIREBASE_DATABASE_URL} \
          -e FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID} \
          -e FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET} \
          -e FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID} \
          -e FIREBASE_APP_ID=${FIREBASE_APP_ID} \
          -e FIREBASE_MEASUREMENT_ID=${FIREBASE_MEASUREMENT_ID} \
          ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest; then
            echo "Container failed to start"
            exit 1
          fi

      - name: Verify container is running
        run: |
          sleep 10  # Wait for container to fully start
          if ! docker ps | grep easylogin; then
            echo "Container is not running"
            echo "Container Logs:"
            docker logs easylogin
            exit 1
          fi
          echo "Container is running successfully"
          echo "Container Logs:"
          docker logs easylogin
          echo "Port Status:"
          netstat -tulpn | grep 8080

      - name: Clean previous images and containers
        if: always()  # This will run even if previous steps failed
        run: |
         docker system prune -f